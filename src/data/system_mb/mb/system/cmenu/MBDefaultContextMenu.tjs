/******************************************************************************
	system_mb/mb/system/cmenu/MBDefaultContextMenu.tjs
*******************************************************************************/


class MBDefaultContextMenu extends MBSystemLayer
{
	var owner;
	
	var objCloseButton; // 「閉じる」ボタン
	var objQuitButton;	// 「終了」ボタン
	var objResetButton;	// 「リセット」ボタン
	
	var objMenuItemArray = [];	// メニューレイヤ
	var objMenuLabelArray = ['環境設定'];
	
	var objWorkingSpace;	// 作業領域レイヤ
	
	var strCaption = "GAME OPTIONS";
	
	var defWidth = 179;
	var intCButtonHeight = __CLB_HEIGHT + 25;	// 前者が高さ。後者はマージン
	
	var fontSize = MBFontStyle.size.label;
	var fontFace = MBFontStyle.face.normal;
	var fontColorDisable = MBColors.font.label.disabled;
	
	var refFocusMember;
	
	
	function MBDefaultContextMenu(win, par, own)
	{
		// コンストラクタ
		
		super.MBSystemLayer(win, par, strCaption);
		
		owner = own;
		init();
	}
	
	function finalize()
	{
		// ファイナライザ
		
		SystemManager.fcRemoveStackMember(refFocusMember);
		
		invalidate objCloseButton if (objCloseButton !== void);
		invalidate objQuitButton if (objQuitButton !== void);
		invalidate objResetButton if (objResetButton !== void);
		
		var i;
		for (i=0; i<objMenuItemArray.count; i++) {
			invalidate objMenuItemArray[i] if (objMenuItemArray[i] !== void);
		}
		
		invalidate objWorkingSpace if (objWorkingSpace !== void);
		
		super.finalize(...);
	}
	
	function init()
	{
		// 初期化
		
		name      = 'コンテクストメニュー';
		focusable = true;
		defHeight = fontSize * 1.5 * (objMenuLabelArray.count + 1) + intCButtonHeight + marginWidth + borderWidth + fontSize * 4;
		
		var idx = -1;
		var tc  = 0;
		do {
			idx = objMenuLabelArray.find('--', idx + 1);
			if (idx > -1) {
				defHeight -= fontSize - 1;
			}
			
			if (tc++ > 999) {
				break;
			}
		} while (idx > -1 && idx + 1 < objMenuLabelArray.count);
		
		// マウスカーソルの位置から出現位置を決定
		setOpenPosition(
			parent.cursorX - defWidth * 0.75,
			parent.cursorY - 10
		);
	}
	
	
	//==========================================================================
	
	function onEndOfShowing()
	{
		// 出現完了後の動作
		
		super.onEndOfShowing();
		
		makeMainMenu();
		setMenuStack();
		sndfunc.seMenuStart();
	}
	
	function hide()
	{
		// 消去
		
		SystemManager.fcRemoveStackMember(refFocusMember);
		super.hide();
	}
	
	function onEndOfHiding()
	{
		// 消去完了後の処理
		
		SystemManager.fireContextMenuEndTrigger();
		SystemManager.destroyContextMenu();
	}
	
	//--------------------------------------------------------------------------
	
	function makeMainMenu()
	{
		// メニューを作る
		
		var tx = borderWidth + marginWidth;
		var ty = 30;
		
		var i;
		var count = 0;
		for (i=0; i<objMenuLabelArray.count; i++) {
			if (objMenuLabelArray[i] == '--') {
				drawHorizontalBorder(tx, ty);
				ty += fontSize * 0.5 + 1;
			}
			else {
				objMenuItemArray[count] = new MBContextMenuItem(window, this, objMenuLabelArray[i]);
				objMenuItemArray[count].setPos(tx, ty);
				
				count += 1;
				ty    += fontSize * 1.5;
			}
		}
		
		ty += fontSize * 0.5;
		drawHorizontalBorder(tx, ty);
		
		ty += 1 + fontSize * 0.5;
		objResetButton = new MBContextMenuItem(window, this, "リセット");
		objResetButton.setPos(tx, ty);
		
		ty += fontSize * 1.5;
		objQuitButton = new MBContextMenuItem(window, this, "ゲーム終了");
		objQuitButton.setPos(tx, ty);
		
		ty += fontSize * 1.5;
		drawHorizontalBorder(tx, ty);
		
		ty += 1 + 20;
		objCloseButton = new MBContextMenuButton(window, this);
		objCloseButton.setImageSize(__CLB_WIDTH, __CLB_HEIGHT);
		//objCloseButton.setSizeToImageSize();
		objCloseButton.loadImages("bt_cancel");
		//objCloseButton.setPos(tx, ty);
		objCloseButton.setPos((defWidth - objCloseButton.width) * 0.5, ty);
		objCloseButton.visible = true;
	}
	
	function drawHorizontalBorder(x, y)
	{
		// ヨコ線を引く
		
		fillRect(x, y, width - (marginWidth + borderWidth) * 2, 1, fontColor + 0xff000000);
	}
	
	//--------------------------------------------------------------------------
	
	function setMenuStack()
	{
		// メニュースタックを作る
		
		var i;
		for (i=0; i<objMenuItemArray.count; i++) {
			if (i == 0) {
				objMenuItemArray[i].objCursorMapHash.up = objCloseButton;
				refFocusMember = SystemManager.fcPushFocusStack(objMenuItemArray[i]);
			}
			else {
				objMenuItemArray[i].objCursorMapHash.up = objMenuItemArray[i - 1];
			}
			
			if (i == objMenuItemArray.count - 1) {
				objMenuItemArray[i].objCursorMapHash.down = objResetButton;
			}
			else {
				objMenuItemArray[i].objCursorMapHash.down = objMenuItemArray[i + 1];
			}
		}
		
		if (!objMenuItemArray.count) {
			objResetButton.objCursorMapHash.up = objCloseButton;
			refFocusMember = SystemManager.fcPushFocusStack(objResetButton);
		}
		else {
			objResetButton.objCursorMapHash.up = objMenuItemArray[objMenuItemArray.count - 1];
		}
		
		objResetButton.objCursorMapHash.down = objQuitButton;
		
		objQuitButton.objCursorMapHash.up = objResetButton;
		objQuitButton.objCursorMapHash.down = objCloseButton;
		
		objCloseButton.objCursorMapHash.up = objQuitButton;
		objCloseButton.objCursorMapHash.down = objMenuItemArray[0];
		
		SystemManager.fcApplyFocusTargetSearch();
	}
	
	//--------------------------------------------------------------------------
	
	function makePreferenceMenu()
	{
		// 設定画面を作る
		
		invalidate objWorkingSpace if (objWorkingSpace !== void);
		objWorkingSpace = new MBControllPanel(window, parent, this);
		objWorkingSpace.setControllPanel();
		objWorkingSpace.show();
	}
	
	function onControllPanelHasGone()
	{
		invalidate objWorkingSpace if (objWorkingSpace !== void);
		SystemManager.acDisactivateCanceller();
		SystemManager.fcApplyFocusTargetSearch();
	}
	
	//--------------------------------------------------------------------------
	
	function onMouseDown(x, y, button, shift)
	{
		// 右クリックされたらこのレイヤを隠すように
		
		if(button == mbRight)
		{
			hide();
		}
	}
	
	function disableAll(disact = true)
	{
		// 一時的にメニューを無効化
		
		SystemManager.acActivateCanceller();
		if (disact) {
			disactivate();
		}
	}
	
	function enableAll()
	{
		// メニューを有効化
		
		SystemManager.acDisactivateCanceller();
		activate();
		SystemManager.fcApplyFocusTargetSearch();
	}
	
	//--------------------------------------------------------------------------
	
	function close()
	{
		sndfunc.seCancel();
		disableAll(false);
		hide();
	}
	
	//--------------------------------------------------------------------------
	
	function doOptionalWork(label)
	{
		// オプション項目の動作
		// 基本的にこれを書き換える感じにしませう
		
		switch (label) {
			case '環境設定':
				sndfunc.seDeside();
				makePreferenceMenu();
				return;
		}
	}
	
	//--------------------------------------------------------------------------
	
	function onSelectedItemClick(sender)
	{
		// メニュー選択時の動作
		
		cursor = window.cursorDefault;
		
		// オプション項目
		if (objMenuItemArray.find(sender) > -1) {
			doOptionalWork(sender.strItemLabel);
			return;
		}
		
		// システム項目
		switch (sender)
		{
			case objResetButton:	// リセット
				disableAll();
				sndfunc.seDeside();
				/*enableAll();
				window.goToStartWithAsk();*/
				tf.gotoreset = true;
				break;
			
			case objQuitButton:	// ゲーム終了
				disableAll();
				sndfunc.seDeside();
				/*enableAll();
				window.close();*/
				tf.gotoexit = true;
				break;
			
			case objCloseButton:	// 閉じる
				break;
		}
		
		close();
	}
	
	function onKeyDown(key, shift)
	{
		if (VK_APPS) {
			onEscapeKeyDown();
		}
		else {
			ptFocusController.onKeyDown(key, shift);
		}
	}
	
	function onEscapeKeyDown()
	{
		// エスケープキーが押されたときの動作
		
		onSelectedItemClick(objCloseButton);
	}
}
